
{
  var fields = {};
  var list;

  function normalize(str) {
    return str.trim().replace(/^"|"$/g, '');
  }
}

message
  : fields+ CRLF
    { $ = fields }
  ;

fields
  : from-field
  | to-field
  | cc-field
  | bcc-field
  | date-field
  | sender-field
  | subject-field
  | received-field
  | message-id-field
  | in-reply-to-field
  | reply-to-field
  | references-field
  | comments-field
  | keywords-field
  | resent-sender-field
  | resent-from-field
  | resent-to-field
  | resent-cc-field
  | resent-date-field
  | resent-message-id-field
  | optional-field
  ;

resent-message-id-field
  : { list = [] }
    'Resent-Message-ID:' (id:msg-id { list.push(id) })+ CRLF
    { fields['resent-message-id'] = list }
  ;

resent-date-field
  : 'Resent-Date:' date:date-time CRLF
    { fields['resent-date'] = new Date(date) }
  ;

resent-sender-field
  : 'Resent-Sender:' mail:mailbox CRLF
    { fields['resent-sender'] = mail }
  ;

resent-cc-field
  : 'Resent-Cc:' list:address-list CRLF
    { fields['resent-cc'] = list }
  ;

resent-to-field
  : 'Resent-To:' list:address-list CRLF
    { fields['resent-to'] = list }
  ;

resent-from-field
  : 'Resent-From:' list:mailbox-list CRLF
    { fields['resent-from'] = list }
  ;

keywords-field
  : { list = [] }
    'Keywords:' < phrase > { list.push(normalize(text)) }
    (',' < phrase > { list.push(normalize(text)) })* CRLF
    { fields.keywords = list }
  ;

references-field
  : { list = [] }
    'References:' (id:msg-id { list.push(id) })+ CRLF
    { fields.references = list }
  ;

in-reply-to-field
  : { list = [] }
    'In-Reply-To:' (id:msg-id { list.push(id) })+ CRLF
    { fields['in-reply-to'] = list }
  ;

reply-to-field
  : 'Reply-To:' list:address-list CRLF
    { fields['reply-to'] = list }
  ;

message-id-field
  : { list = [] }
    'Message-ID:' (id:msg-id { list.push(id) })+ CRLF
    { fields['message-id'] = list }
  ;

from-field
  : 'From:' list:mailbox-list CRLF
    { fields.from = list }
  ;

comments-field
  : 'Comments:' str:unstructured CRLF
    { fields.comments = normalize(str) }
  ;

sender-field
  : 'Sender:' mail:mailbox CRLF
    { fields.sender = mail }
  ;

date-field
  : 'Date:' date:date-time CRLF
    { fields.date = new Date(date) }
  ;

to-field
  : 'To:' list:address-list CRLF
    { fields.to = list }
  ;

cc-field
  : 'Cc:' list:address-list CRLF
    { fields.cc = list }
  ;

bcc-field
  : 'Bcc:'(list:address-list | CFWS)? CRLF
    { fields.bcc = list } 
  ;

subject-field
  : 'Subject:' str:unstructured CRLF
    { fields.subject = normalize(str) }
  ;

received-field
  : 'Received:' str:received-tokens ';' FWS? date:date-time CRLF
    { fields.received = [normalize(str), new Date(date)] }
  ;

optional-field
  : name:field-name ':' str:unstructured CRLF
    { fields[name.toLowerCase()] = normalize(str) }
  ;

msg-id
  : CFWS? '<' < id-left '@' id-right > '>' CFWS?  { $ = text }
  ;

id-left
  : dot-atom-text
  ;

id-right
  : dot-atom-text
  ;

// printable chars omitting ';'
// including whitespace

received-tokens
  : < [\x21-\x3a\x3c-\x7e \t\r\n]+ > { $ = text }
  ;

// printable chars omitting ':'

field-name
  : < [\x21-\x39\x3b-\x7e]+ > { $ = text }
  ;

date-time
  : < (day-of-week - ',')? - date - time > CFWS  { $ = text }
  ;

day-of-week
  : FWS? day-name
  ;

day-name
  : 'Mon'
  | 'Tue'
  | 'Wed'
  | 'Thu'
  | 'Fri'
  | 'Sat'
  | 'Sun'
  ;

date
  : digit2 - month - digit4
  ;

month
  : 'Jan'
  | 'Feb'
  | 'Mar'
  | 'Apr'
  | 'May'
  | 'Jun'
  | 'Jul'
  | 'Aug'
  | 'Sep'
  | 'Oct'
  | 'Nov'
  | 'Dev'
  ;

time
  : time-of-day - zone
  ;

time-of-day
  : digit2 ':' digit2 (':' digit2)?
  ;

zone
  : [+-] digit4
  ;

unstructured
  : < (FWS? VCHAR -)* > { $ = text }
  ; 

address-list
  : { list = [] }
    a:address - { list.push(a) }
    ( - ',' - b:address { list.push(b) })*
    { $ = list }
  ;

address
  : mailbox
  | group
  ;

group
  : display-name - ':' - group-list? - ';'
  ;

group-list
  : mailbox-list
  ;

mailbox-list
  : { list = [] }
    a:mailbox - { list.push(a) }
    (',' b:mailbox { list.push(b) } )*
    { $ = list }
  ;

mailbox
  : name-addr
  | addr-spec
  ;

name-addr
  : a:display-name b:angle-addr  { $ = b.concat(normalize(a)) }
  | a:angle-addr  { $ = a }
  ;

addr-spec
  : a:local-part '@' b:domain     { $ = [a + '@' + b] }
  ;

local-part
  : dot-atom
  | quoted-string
  ;

domain
  : dot-atom
  | domain-literal
  ;

domain-literal
  : CFWS? '[' /[^\]]*/ ']' CFWS?
  ;

display-name
  : < phrase > { $ = text }
  ;

angle-addr
  : CFWS? '<' addr-spec '>' CFWS?
  ;

phrase
  : word+
  ;

word
  : atom
  | quoted-string
  ;

atom
  : CFWS? [-a-zA-Z0-9!#$%&'*+/?=_`{}|~]+ CFWS? // '
  ;

dot-atom
  : CFWS? < dot-atom-text > CFWS? { $ = text }
  ;

dot-atom-text
  : atom ('.' atom)*
  ;

quoted-string
  : CFWS? /"([^"]*)"/ CFWS? // "
  ;

quoted-pair
  : '\\' (VCHAR | WSP)
  ;

// printable us-ascii 
// chars not including
// (, ), \

ctext
  : [\x21-\x27\x2a-\x5b\x5d-\x7e]+
  ;

ccontent
  : ctext
  | quoted-pair
  | comment
  ;

comment
  : '(' (FWS? ccontent)* FWS? ')'
  ;

CFWS
  : (FWS? comment)* FWS?
  | FWS
  ;

digit2: [0-9]{2};

digit4: [0-9]{4};

VCHAR: [\x21-\x7E]+;

FWS: CRLF? [ \t]+;

CRLF: '\r\n';

-: [ \t]*;
