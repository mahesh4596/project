module.exports = function parse(input) {
  var orig = input
    , thunks = []
    , vstack = []
    , rightmostPos = 0
    , pos = 0
    , begin = 0
    , end = 0
    , thunkpos
    , mark
    , text
    , tmp
    , ts
    , $;

  var fields = {};
  var list;

  function normalize(str) {
    return str.trim().replace(/^"|"$/g, '');
  };

  return _message(), done();

  function done() {
    var len = thunks.length
      , thunk;
    for (var i = 0; i < len; ++i) {
      thunk = thunks[i];
      $ = undefined;
      thunk(thunk.begin, thunk.end);
      if (undefined !== $) vstack.push($);
    }
    if (input.length) error();
    return $;
  }

  function inspect(str) {
    return str
      .replace(/\\/g, '\\\\')
      .replace(/\r/g, '\\r')
      .replace(/\n/g, '\\n')
      .replace(/"/g, '\\"');
  }

  function state() {
    rightmostPos = pos;
    return {
        thunkpos: thunks.length
      , input: input
      , pos: pos
    };
  }

  function restore(state) {
    thunks.length = state.thunkpos;
    input = state.input;
    pos = state.pos;
    return 1;
  }

  function thunk(fn) {
    fn.begin = begin;
    fn.end = end;
    thunks.push(fn);
    return 1;
  }

  function anyChar() {
    if (input.length) {
      ++pos;
      input = input.substr(1);
      return 1;
    }
  }

  function char(c) {
    if (c == input[0]) {
      ++pos;
      input = input.substr(1);
      return 1;
    }
  }

  function string(str) {
    if (0 == input.indexOf(str)) {
      var len = str.length;
      pos += len;
      input = input.substr(len);
      return 1;
    }
  }

  function pattern(regexp) {
    var captures;
    if (captures = regexp.exec(input)) {
      var len = captures[0].length;
      pos += len;
      input = input.substr(len);
      return 1;
    }
  }

  function errorPosition() {
    var lineno = 1;
    for (var i = 0; i < pos; ++i) {
      switch (orig[i]) {
        case '\n': ++lineno; break;
      }
    }
    return { line: lineno };
  }

  function error() {
    pos = rightmostPos;
    var prefix = 'parse error on line ' + errorPosition().line + ' near '
      , prefixlen = 'Error: '.length + prefix.length + 1
      , context = 10
      , start = Math.max(pos - context, 0)
      , len = orig.length
      , end = Math.min(pos + context, len)
      , mark = pos - start
      , tilde = Array(end - pos).join('~')
      , ellipsis = end == len ? '' : '...'
      , _context = orig.slice(start, end) + ellipsis
      , context = inspect(_context)
      , head = _context.slice(0, mark)
      , diff = inspect(head).length - head.length
      , mark = Array(prefixlen + 1 + diff + mark).join(' ') + '^' + tilde;
    throw new Error(prefix + '"' + context + '"' + '\n' + mark);
  }
    
  function _message(){
    var s = state();
    if (((function(){
        if (!_fields()) return;
        while (_fields()) ;
        return 1;
      })()
        && _CRLF()
        && thunk(function(){
        $ = fields
      }))) return 1;
    restore(s);
  }
  
  function _fields(){
    var s = state();
    if ((_from_field()
      || (restore(s)
       && (_to_field()
      || (restore(s)
       && (_cc_field()
      || (restore(s)
       && (_bcc_field()
      || (restore(s)
       && (_date_field()
      || (restore(s)
       && (_sender_field()
      || (restore(s)
       && (_subject_field()
      || (restore(s)
       && (_received_field()
      || (restore(s)
       && (_message_id_field()
      || (restore(s)
       && (_in_reply_to_field()
      || (restore(s)
       && (_reply_to_field()
      || (restore(s)
       && (_references_field()
      || (restore(s)
       && (_comments_field()
      || (restore(s)
       && (_keywords_field()
      || (restore(s)
       && (_resent_sender_field()
      || (restore(s)
       && (_resent_from_field()
      || (restore(s)
       && (_resent_to_field()
      || (restore(s)
       && (_resent_cc_field()
      || (restore(s)
       && (_resent_date_field()
      || (restore(s)
       && (_resent_message_id_field()
      || (restore(s)
       && _optional_field()))))))))))))))))))))))))))))))))))))))))) return 1;
    restore(s);
  }
  
  function _resent_message_id_field(){
    var s = state();
    if ((thunk(function(){
        list = []
      })
        && string("Resent-Message-ID:")
        && (function(){
        if (!(function(){
          var s = state();
          return (_msg_id()
            && thunk(function(){
            var id = vstack.pop();
            list.push(id)
          }));
        })()) return;
        while ((function(){
          var s = state();
          return (_msg_id()
            && thunk(function(){
            var id = vstack.pop();
            list.push(id)
          }));
        })()) ;
        return 1;
      })()
        && _CRLF()
        && thunk(function(){
        fields['resent-message-id'] = list
      }))) return 1;
    restore(s);
  }
  
  function _resent_date_field(){
    var s = state();
    if ((string("Resent-Date:")
        && _date_time()
        && _CRLF()
        && thunk(function(){
        var date = vstack.pop();
        fields['resent-date'] = new Date(date)
      }))) return 1;
    restore(s);
  }
  
  function _resent_sender_field(){
    var s = state();
    if ((string("Resent-Sender:")
        && _mailbox()
        && _CRLF()
        && thunk(function(){
        var mail = vstack.pop();
        fields['resent-sender'] = mail
      }))) return 1;
    restore(s);
  }
  
  function _resent_cc_field(){
    var s = state();
    if ((string("Resent-Cc:")
        && _address_list()
        && _CRLF()
        && thunk(function(){
        var list = vstack.pop();
        fields['resent-cc'] = list
      }))) return 1;
    restore(s);
  }
  
  function _resent_to_field(){
    var s = state();
    if ((string("Resent-To:")
        && _address_list()
        && _CRLF()
        && thunk(function(){
        var list = vstack.pop();
        fields['resent-to'] = list
      }))) return 1;
    restore(s);
  }
  
  function _resent_from_field(){
    var s = state();
    if ((string("Resent-From:")
        && _mailbox_list()
        && _CRLF()
        && thunk(function(){
        var list = vstack.pop();
        fields['resent-from'] = list
      }))) return 1;
    restore(s);
  }
  
  function _keywords_field(){
    var s = state();
    if ((thunk(function(){
        list = []
      })
        && string("Keywords:")
        && ((begin=pos, 1)
      && _phrase()
      && (end=pos, 1)
      && thunk(function(begin, end){ text = orig.slice(begin, end); }))
        && thunk(function(){
        list.push(normalize(text))
      })
        && (function(){
        while ((function(){
          var s = state();
          return (char(",")
            && ((begin=pos, 1)
          && _phrase()
          && (end=pos, 1)
          && thunk(function(begin, end){ text = orig.slice(begin, end); }))
            && thunk(function(){
            list.push(normalize(text))
          }));
        })()) ;
        return 1;
      })()
        && _CRLF()
        && thunk(function(){
        fields.keywords = list
      }))) return 1;
    restore(s);
  }
  
  function _references_field(){
    var s = state();
    if ((thunk(function(){
        list = []
      })
        && string("References:")
        && (function(){
        if (!(function(){
          var s = state();
          return (_msg_id()
            && thunk(function(){
            var id = vstack.pop();
            list.push(id)
          }));
        })()) return;
        while ((function(){
          var s = state();
          return (_msg_id()
            && thunk(function(){
            var id = vstack.pop();
            list.push(id)
          }));
        })()) ;
        return 1;
      })()
        && _CRLF()
        && thunk(function(){
        fields.references = list
      }))) return 1;
    restore(s);
  }
  
  function _in_reply_to_field(){
    var s = state();
    if ((thunk(function(){
        list = []
      })
        && string("In-Reply-To:")
        && (function(){
        if (!(function(){
          var s = state();
          return (_msg_id()
            && thunk(function(){
            var id = vstack.pop();
            list.push(id)
          }));
        })()) return;
        while ((function(){
          var s = state();
          return (_msg_id()
            && thunk(function(){
            var id = vstack.pop();
            list.push(id)
          }));
        })()) ;
        return 1;
      })()
        && _CRLF()
        && thunk(function(){
        fields['in-reply-to'] = list
      }))) return 1;
    restore(s);
  }
  
  function _reply_to_field(){
    var s = state();
    if ((string("Reply-To:")
        && _address_list()
        && _CRLF()
        && thunk(function(){
        var list = vstack.pop();
        fields['reply-to'] = list
      }))) return 1;
    restore(s);
  }
  
  function _message_id_field(){
    var s = state();
    if ((thunk(function(){
        list = []
      })
        && string("Message-ID:")
        && (function(){
        if (!(function(){
          var s = state();
          return (_msg_id()
            && thunk(function(){
            var id = vstack.pop();
            list.push(id)
          }));
        })()) return;
        while ((function(){
          var s = state();
          return (_msg_id()
            && thunk(function(){
            var id = vstack.pop();
            list.push(id)
          }));
        })()) ;
        return 1;
      })()
        && _CRLF()
        && thunk(function(){
        fields['message-id'] = list
      }))) return 1;
    restore(s);
  }
  
  function _from_field(){
    var s = state();
    if ((string("From:")
        && _mailbox_list()
        && _CRLF()
        && thunk(function(){
        var list = vstack.pop();
        fields.from = list
      }))) return 1;
    restore(s);
  }
  
  function _comments_field(){
    var s = state();
    if ((string("Comments:")
        && _unstructured()
        && _CRLF()
        && thunk(function(){
        var str = vstack.pop();
        fields.comments = normalize(str)
      }))) return 1;
    restore(s);
  }
  
  function _sender_field(){
    var s = state();
    if ((string("Sender:")
        && _mailbox()
        && _CRLF()
        && thunk(function(){
        var mail = vstack.pop();
        fields.sender = mail
      }))) return 1;
    restore(s);
  }
  
  function _date_field(){
    var s = state();
    if ((string("Date:")
        && _date_time()
        && _CRLF()
        && thunk(function(){
        var date = vstack.pop();
        fields.date = new Date(date)
      }))) return 1;
    restore(s);
  }
  
  function _to_field(){
    var s = state();
    if ((string("To:")
        && _address_list()
        && _CRLF()
        && thunk(function(){
        var list = vstack.pop();
        fields.to = list
      }))) return 1;
    restore(s);
  }
  
  function _cc_field(){
    var s = state();
    if ((string("Cc:")
        && _address_list()
        && _CRLF()
        && thunk(function(){
        var list = vstack.pop();
        fields.cc = list
      }))) return 1;
    restore(s);
  }
  
  function _bcc_field(){
    var s = state();
    if ((string("Bcc:")
        && ((function(){
        var s = state();
        return (_address_list()
        || (restore(s)
         && _CFWS()));
      })() || 1)
        && _CRLF()
        && thunk(function(){
        var list = vstack.pop();
        fields.bcc = list
      }))) return 1;
    restore(s);
  }
  
  function _subject_field(){
    var s = state();
    if ((string("Subject:")
        && _unstructured()
        && _CRLF()
        && thunk(function(){
        var str = vstack.pop();
        fields.subject = normalize(str)
      }))) return 1;
    restore(s);
  }
  
  function _received_field(){
    var s = state();
    if ((string("Received:")
        && _received_tokens()
        && char(";")
        && (_FWS() || 1)
        && _date_time()
        && _CRLF()
        && thunk(function(){
        var date = vstack.pop()
          , str = vstack.pop();
        fields.received = [normalize(str), new Date(date)]
      }))) return 1;
    restore(s);
  }
  
  function _optional_field(){
    var s = state();
    if ((_field_name()
        && char(":")
        && _unstructured()
        && _CRLF()
        && thunk(function(){
        var str = vstack.pop()
          , name = vstack.pop();
        fields[name.toLowerCase()] = normalize(str)
      }))) return 1;
    restore(s);
  }
  
  function _msg_id(){
    var s = state();
    if (((_CFWS() || 1)
        && char("<")
        && ((begin=pos, 1)
      && (_id_left()
        && char("@")
        && _id_right())
      && (end=pos, 1)
      && thunk(function(begin, end){ text = orig.slice(begin, end); }))
        && char(">")
        && (_CFWS() || 1)
        && thunk(function(){
        $ = text
      }))) return 1;
    restore(s);
  }
  
  function _id_left(){
    var s = state();
    if (_dot_atom_text()) return 1;
    restore(s);
  }
  
  function _id_right(){
    var s = state();
    if (_dot_atom_text()) return 1;
    restore(s);
  }
  
  function _received_tokens(){
    var s = state();
    if ((((begin=pos, 1)
      && pattern(/^[\x21-\x3a\x3c-\x7e \t\r\n]+/)
      && (end=pos, 1)
      && thunk(function(begin, end){ text = orig.slice(begin, end); }))
        && thunk(function(){
        $ = text
      }))) return 1;
    restore(s);
  }
  
  function _field_name(){
    var s = state();
    if ((((begin=pos, 1)
      && pattern(/^[\x21-\x39\x3b-\x7e]+/)
      && (end=pos, 1)
      && thunk(function(begin, end){ text = orig.slice(begin, end); }))
        && thunk(function(){
        $ = text
      }))) return 1;
    restore(s);
  }
  
  function _date_time(){
    var s = state();
    if ((((begin=pos, 1)
      && (((function(){
        var s = state();
        return (_day_of_week()
          && __()
          && char(","));
      })() || 1)
        && __()
        && _date()
        && __()
        && _time())
      && (end=pos, 1)
      && thunk(function(begin, end){ text = orig.slice(begin, end); }))
        && _CFWS()
        && thunk(function(){
        $ = text
      }))) return 1;
    restore(s);
  }
  
  function _day_of_week(){
    var s = state();
    if (((_FWS() || 1)
        && _day_name())) return 1;
    restore(s);
  }
  
  function _day_name(){
    var s = state();
    if ((string("Mon")
      || (restore(s)
       && (string("Tue")
      || (restore(s)
       && (string("Wed")
      || (restore(s)
       && (string("Thu")
      || (restore(s)
       && (string("Fri")
      || (restore(s)
       && (string("Sat")
      || (restore(s)
       && string("Sun")))))))))))))) return 1;
    restore(s);
  }
  
  function _date(){
    var s = state();
    if ((_digit2()
        && __()
        && _month()
        && __()
        && _digit4())) return 1;
    restore(s);
  }
  
  function _month(){
    var s = state();
    if ((string("Jan")
      || (restore(s)
       && (string("Feb")
      || (restore(s)
       && (string("Mar")
      || (restore(s)
       && (string("Apr")
      || (restore(s)
       && (string("May")
      || (restore(s)
       && (string("Jun")
      || (restore(s)
       && (string("Jul")
      || (restore(s)
       && (string("Aug")
      || (restore(s)
       && (string("Sep")
      || (restore(s)
       && (string("Oct")
      || (restore(s)
       && (string("Nov")
      || (restore(s)
       && string("Dev")))))))))))))))))))))))) return 1;
    restore(s);
  }
  
  function _time(){
    var s = state();
    if ((_time_of_day()
        && __()
        && _zone())) return 1;
    restore(s);
  }
  
  function _time_of_day(){
    var s = state();
    if ((_digit2()
        && char(":")
        && _digit2()
        && ((function(){
        var s = state();
        return (char(":")
          && _digit2());
      })() || 1))) return 1;
    restore(s);
  }
  
  function _zone(){
    var s = state();
    if ((pattern(/^[+-]/)
        && _digit4())) return 1;
    restore(s);
  }
  
  function _unstructured(){
    var s = state();
    if ((((begin=pos, 1)
      && (function(){
        while ((function(){
          var s = state();
          return ((_FWS() || 1)
            && _VCHAR()
            && __());
        })()) ;
        return 1;
      })()
      && (end=pos, 1)
      && thunk(function(begin, end){ text = orig.slice(begin, end); }))
        && thunk(function(){
        $ = text
      }))) return 1;
    restore(s);
  }
  
  function _address_list(){
    var s = state();
    if ((thunk(function(){
        list = []
      })
        && _address()
        && __()
        && thunk(function(){
        var a = vstack.pop();
        list.push(a)
      })
        && (function(){
        while ((function(){
          var s = state();
          return (__()
            && char(",")
            && __()
            && _address()
            && thunk(function(){
            var b = vstack.pop();
            list.push(b)
          }));
        })()) ;
        return 1;
      })()
        && thunk(function(){
        $ = list
      }))) return 1;
    restore(s);
  }
  
  function _address(){
    var s = state();
    if ((_mailbox()
      || (restore(s)
       && _group()))) return 1;
    restore(s);
  }
  
  function _group(){
    var s = state();
    if ((_display_name()
        && __()
        && char(":")
        && __()
        && (_group_list() || 1)
        && __()
        && char(";"))) return 1;
    restore(s);
  }
  
  function _group_list(){
    var s = state();
    if (_mailbox_list()) return 1;
    restore(s);
  }
  
  function _mailbox_list(){
    var s = state();
    if ((thunk(function(){
        list = []
      })
        && _mailbox()
        && __()
        && thunk(function(){
        var a = vstack.pop();
        list.push(a)
      })
        && (function(){
        while ((function(){
          var s = state();
          return (char(",")
            && _mailbox()
            && thunk(function(){
            var b = vstack.pop();
            list.push(b)
          }));
        })()) ;
        return 1;
      })()
        && thunk(function(){
        $ = list
      }))) return 1;
    restore(s);
  }
  
  function _mailbox(){
    var s = state();
    if ((_name_addr()
      || (restore(s)
       && _addr_spec()))) return 1;
    restore(s);
  }
  
  function _name_addr(){
      var s = state();
    if (((_display_name()
        && _angle_addr()
        && thunk(function(){
        var b = vstack.pop()
          , a = vstack.pop();
        $ = b.concat(normalize(a))
      }))
      || (restore(s)
       && (_angle_addr()
        && thunk(function(){
        var a = vstack.pop();
        $ = a
      }))))) return 1;
    restore(s);
  }
  
  function _addr_spec(){
    var s = state();
    if ((_local_part()
        && char("@")
        && _domain()
        && thunk(function(){
        var b = vstack.pop()
          , a = vstack.pop();
        $ = [a + '@' + b]
      }))) return 1;
    restore(s);
  }
  
  function _local_part(){
    var s = state();
    if ((_dot_atom()
      || (restore(s)
       && _quoted_string()))) return 1;
    restore(s);
  }
  
  function _domain(){
    var s = state();
    if ((_dot_atom()
      || (restore(s)
       && _domain_literal()))) return 1;
    restore(s);
  }
  
  function _domain_literal(){
    var s = state();
    if (((_CFWS() || 1)
        && char("[")
        && pattern(/^[^\]]*/)
        && char("]")
        && (_CFWS() || 1))) return 1;
    restore(s);
  }
  
  function _display_name(){
    var s = state();
    if ((((begin=pos, 1)
      && _phrase()
      && (end=pos, 1)
      && thunk(function(begin, end){ text = orig.slice(begin, end); }))
        && thunk(function(){
        $ = text
      }))) return 1;
    restore(s);
  }
  
  function _angle_addr(){
    var s = state();
    if (((_CFWS() || 1)
        && char("<")
        && _addr_spec()
        && char(">")
        && (_CFWS() || 1))) return 1;
    restore(s);
  }
  
  function _phrase(){
    var s = state();
    if ((function(){
        if (!_word()) return;
        while (_word()) ;
        return 1;
      })()) return 1;
    restore(s);
  }
  
  function _word(){
    var s = state();
    if ((_atom()
      || (restore(s)
       && _quoted_string()))) return 1;
    restore(s);
  }
  
  function _atom(){
    var s = state();
    if (((_CFWS() || 1)
        && pattern(/^[-a-zA-Z0-9!#$%&'*+/?=_`{}|~]+/)
        && (_CFWS() || 1))) return 1;
    restore(s);
  }
  
  function _dot_atom(){
    var s = state();
    if (((_CFWS() || 1)
        && ((begin=pos, 1)
      && _dot_atom_text()
      && (end=pos, 1)
      && thunk(function(begin, end){ text = orig.slice(begin, end); }))
        && (_CFWS() || 1)
        && thunk(function(){
        $ = text
      }))) return 1;
    restore(s);
  }
  
  function _dot_atom_text(){
    var s = state();
    if ((_atom()
        && (function(){
        while ((function(){
          var s = state();
          return (char(".")
            && _atom());
        })()) ;
        return 1;
      })())) return 1;
    restore(s);
  }
  
  function _quoted_string(){
    var s = state();
    if (((_CFWS() || 1)
        && pattern(/^"([^"]*)"/)
        && (_CFWS() || 1))) return 1;
    restore(s);
  }
  
  function _quoted_pair(){
    var s = state();
    if ((string("\\")
        && (function(){
        var s = state();
        return (_VCHAR()
        || (restore(s)
         && _WSP()));
      })())) return 1;
    restore(s);
  }
  
  function _ctext(){
      var s = state();
    if (pattern(/^[\x21-\x27\x2a-\x5b\x5d-\x7e]+/)) return 1;
    restore(s);
  }
  
  function _ccontent(){
    var s = state();
    if ((_ctext()
      || (restore(s)
       && (_quoted_pair()
      || (restore(s)
       && _comment()))))) return 1;
    restore(s);
  }
  
  function _comment(){
    var s = state();
    if ((char("(")
        && (function(){
        while ((function(){
          var s = state();
          return ((_FWS() || 1)
            && _ccontent());
        })()) ;
        return 1;
      })()
        && (_FWS() || 1)
        && char(")"))) return 1;
    restore(s);
  }
  
  function _CFWS(){
    var s = state();
    if ((((function(){
        while ((function(){
          var s = state();
          return ((_FWS() || 1)
            && _comment());
        })()) ;
        return 1;
      })()
        && (_FWS() || 1))
      || (restore(s)
       && _FWS()))) return 1;
    restore(s);
  }
  
  function _digit2(){
    var s = state();
    if (pattern(/^[0-9]{2}/)) return 1;
    restore(s);
  }
  
  function _digit4(){
    var s = state();
    if (pattern(/^[0-9]{4}/)) return 1;
    restore(s);
  }
  
  function _VCHAR(){
    var s = state();
    if (pattern(/^[\x21-\x7E]+/)) return 1;
    restore(s);
  }
  
  function _FWS(){
    var s = state();
    if (((_CRLF() || 1)
        && pattern(/^[ \t]+/))) return 1;
    restore(s);
  }
  
  function _CRLF(){
    var s = state();
    if (string("\r\n")) return 1;
    restore(s);
  }
  
  function __(){
    var s = state();
    if (pattern(/^[ \t]*/)) return 1;
    restore(s);
  }
  
}