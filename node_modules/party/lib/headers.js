
/*!
 * party - header
 * Copyright(c) 2011 LearnBoost <tj@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var Part = require('./part');

/**
 * Parse part headers, emitting "part" events
 * with `Part` objects which emit "data" and "end".
 *
 * @param {Object} options
 * @return {Function}
 * @api public
 */

module.exports = function(options){
  return function headers(parser){
    var state
      , field
      , header
      , part
      , val;

    parser.on('end', function(){
      if (part) part.emit('end');
    });

    parser.on('part start', function(){
      if (part) part.emit('end');
      state = 'field';
      field = val = '';
      header = {};
    });

    parser.on('part data', function(chunk, start, end){
      var len = chunk.length
        , c;

      for (var i = 0; i < len; ++i) {
        c = chunk[i];
        //console.log(' %s : %s', state, require('util').inspect(String.fromCharCode(c)));
        switch (state) {
          case 'part':
            part.emit('data', chunk.slice(i, len));
            return;
          case 'field':
            // :
            if (0x3a == c) {
              state = 'field value lws';
            } else {
              field += lower(c);
            }
            break;
          case 'field value lws':
            // lws
            if (0x20 == c || 0x0b == c) {
              // ignore
            } else {
              state = 'field value';
              val += lower(c);
            }
            break;
          case 'field value':
            // CR
            if (0x0d == c) {
              state = 'field value CR';
            } else {
              val += lower(c);
            }
            break;
          case 'field value CR':
            // LF
            if (0x0a == c) {
              state = 'field value CRLF';
            } else {
              val += lower(c);
            }
            break;
          case 'field value CRLF':
            // header CR
            if (0x0d == c) {
              state = 'header CR';
              header[field] = val;
            // same field lws
            } else if (0x20 == c || 0x0b == c) {
              state = 'field value';
            // next field
            } else {
              state = 'field';
              header[field] = val;
              field = val = '';
              field += lower(c);
            }
            break;
          case 'header CR':
            // LF
            if (0x0a == c) {
              state = 'part';
              parser.emit('part', part = new Part(header));
              part.emit('data', chunk.slice(++i, len));
              header = null;
              return;
            } else {
              return parser.error('header missing trailing LF');
            }
        }
      }
    });
  }
};

/**
 * Return lower-cased char `c`.
 *
 * @param {String} c
 * @return {String}
 * @api private
 */

function lower(c) {
  // A - Z
  if (c >= 0x41 && c <= 0x5a) {
    return String.fromCharCode(c | 0x20);
  } else {
    return String.fromCharCode(c);
  }
}
