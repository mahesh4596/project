
/*!
 * Party - Part
 * Copyright (c) 2010 LearnBoost <tj@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var Stream = require('stream').Stream;

/**
 * Expose `Part`.
 */

module.exports = Part;

/**
 * Initialize a new `Part` with the given `header`.
 *
 * @param {Object} header
 * @api public
 */

function Part(header) {
  this.header = header;
  this.readable = true;
}

/**
 * Inherit from `Stream.prototype`.
 */

Part.prototype.__proto__ = Stream.prototype;

/**
 * Return "Content-Id".
 *
 * @return {String}
 * @api public
 */

Part.prototype.__defineGetter__('cid', function(){
  return this.header['content-id'];
});

/**
 * Check if "Content-Disposition" states that this
 * part is an attachment.
 *
 * @return {Boolean}
 * @api public
 */

Part.prototype.__defineGetter__('isAttachment', function(){
  return this.startsWith('content-disposition', 'attachment');
});

/**
 * Return the "Content-Transfer-Encoding" value when present.
 *
 * @return {String}
 * @api public
 */

Part.prototype.__defineGetter__('encoding', function(){
  return this.header['content-transfer-encoding'];
});

/**
 * Return the multipart boundary when present.
 *
 * @return {String}
 * @api private
 */

Part.prototype.__defineGetter__('boundary', function(){
  if (!this.is('multipart')) return;
  return Part.boundaryOf(this.header['content-type']);
});

/**
 * Decode body `encoding`, returning a new
 * `Stream`.
 *
 * @param {String} encoding
 * @return {Stream}
 * @api public
 */

Part.prototype.decode = function(encoding){
  var encoding = encoding || this.encoding
    , pipe = new Stream
    , buf = ''
    , decode;

  switch (encoding) {
    case 'base64':
      decode = function(chunk){
        chunk = chunk.toString('ascii').replace(/\r\n/g, '');
        return new Buffer(chunk, 'base64');
      };
      break;
    case 'quoted-printable':
      decode = function(chunk){
        return chunk
          .toString('ascii')
          .split('\r\n')
          .map(function(line){
            return line.replace(/=$/, '')
              .replace(/=([0-9A-F]{2})/g, withChar);
          }).join('');
      };
      break;
    default:
      decode = function(chunk){
        return chunk;
      };
  }

  if (!decode) throw new Error('no decoder for "' + encoding + '"');

  this.on('data', function(chunk){
    pipe.emit('data', decode(chunk));
  });

  this.on('end', function(){
    pipe.emit('end');
  });

  return pipe;
};

/**
 * Get `field`'s param `key` value.
 *
 * @param {String} field
 * @param {String} key
 * @return {String}
 * @api public
 */

Part.prototype.param = function(field, key){
  var val = this.header[field]
    , captures
    , regexp;
  if (!val) return;
  regexp = new RegExp(key + '=(?:"([^"]+)"|([^;]+))', 'i');
  if (captures = regexp.exec(val)) {
    return captures[1] || captures[2];
  }
};

/**
 * Check if `field` starts with `str`.
 *
 * @param {String} field
 * @return {Boolean}
 * @api public
 */

Part.prototype.startsWith = function(field, str){
  var val = this.header[field];
  if (!val) return false;
  return 0 == val.indexOf(str);
};

/**
 * Check if Content-Type is `type`.
 *
 * @param {String} type
 * @return {Boolean}
 * @api public
 */

Part.prototype.is = function(type){
  var contentType = this.header['content-type'];
  if (!contentType) return false;
  return 0 == contentType.indexOf(type);
};

/**
 * Use the given plugin `fn`.
 *
 * @param {Function} fn
 * @return {Part} for chaining
 * @api public
 */

Part.prototype.use = function(fn){
  fn(this);
  return this;
};

/**
 * Return boundary for the given `contentType`.
 *
 * @param {String} contentType
 * @return {String}
 * @api private
 */

Part.boundaryOf = function(contentType) {
  if (!contentType) return;
  var captures = /boundary=(?:"([^"]+)"?|([^;]+))/.exec(contentType);
  if (captures) return captures[1] || captures[2];
};

/**
 * Replace `hex` with the associated char.
 *
 * @param {String} _
 * @param {String} hex
 * @return {String}
 * @api private
 */

function withChar(_, hex) {
  return String.fromCharCode(parseInt(hex, 16));
}