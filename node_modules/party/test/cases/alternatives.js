
/**
 * Module dependencies.
 */

var assert = require('assert')
  , party = require('../../')
  , helpers = require('../helpers');

exports.boundary = '0016e6db2c7a28992004a483da69';

exports.test = function(parser, next){
  parser.on('part', function(part){
    part.header.should.have.property('content-type', 'multipart/alternative; boundary=0016e6db2c7a28991a04a483da67');
    part.boundary.should.equal('0016e6db2c7a28991a04a483da67');
    part.is('multipart').should.be.true;
    part.is('multipart/alternative').should.be.true;
    part.is('multipart/rawr').should.be.false;
    part.is('image').should.be.false;

    var buf = '', n = 0;
    part.on('data', function(chunk){ buf += chunk; });
    part.on('end', function(){
      buf.should.equal(helpers.fixture('alternatives.0'));
      parser = party.createParser('0016e6db2c7a28991a04a483da67');
      parser.on('part', function(part){
        switch (n++) {
          case 0:
            part.header.should.have.property('content-type', 'text/plain; charset=iso-8859-1');
            part.is('text').should.be.true;
            part.is('text/plain').should.be.true;
            buf = '';
            part.on('data', function(chunk){ buf += chunk; });
            part.on('end', function(){
              helpers.assert(buf, 'small.0');
            });
            break;
          case 1:
            part.header.should.have.property('content-type', 'text/html; charset=utf-8');
            part.is('text').should.be.true;
            part.is('text/html').should.be.true;
            buf = '';
            part.on('data', function(chunk){ buf += chunk; });
            part.on('end', function(){
              helpers.assert(buf, 'small.1');
              next();
            });
            break;
        }
      });
      parser.parse(new Buffer(buf));
    });
  });
};